const fs = require("fs");
const path = require("path");
const prompt = require("prompt-sync")();
const simpleGit = require("simple-git");

const git = simpleGit();
const FILE_PATH = path.join(__dirname, "commit_history.txt");

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è
 */
function getRandomCommitCount() {
  return Math.floor(Math.random() * 5) + 1; // –û—Ç 1 –¥–æ 5 –∫–æ–º–º–∏—Ç–æ–≤ –≤ –¥–µ–Ω—å
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
 */
function getRandomTimeInDay(date) {
  const randomHours = Math.floor(Math.random() * 24);
  const randomMinutes = Math.floor(Math.random() * 60);

  return new Date(date.setHours(randomHours, randomMinutes, 0));
}

/**
 * –°–æ–∑–¥–∞—ë—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã
 */
async function generateCommits(startDate, endDate) {
  let currentDate = new Date(startDate);

  while (currentDate <= endDate) {
    if (Math.random() > 0.2) {
      // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–º–º–∏—Ç–æ–≤ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
      const commitCount = getRandomCommitCount();
      console.log(`üìÖ ${currentDate.toDateString()} ‚Üí ${commitCount} –∫–æ–º–º–∏—Ç–æ–≤`);

      for (let i = 0; i < commitCount; i++) {
        const commitDate = getRandomTimeInDay(new Date(currentDate));
        const formattedDate = commitDate.toISOString();

        // –§–∏–∫—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        fs.appendFileSync(FILE_PATH, `Commit on ${formattedDate}\n`);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –∏–Ω–¥–µ–∫—Å
        await git.add(FILE_PATH);

        // –î–µ–ª–∞–µ–º –∫–æ–º–º–∏—Ç —Å –Ω—É–∂–Ω–æ–π –¥–∞—Ç–æ–π
        await git.commit(`Random commit ${i + 1}`, { "--date": formattedDate });

        console.log(`‚úÖ –ö–æ–º–º–∏—Ç ${i + 1} –≤ ${formattedDate}`);
      }
    } else {
      console.log(`üö´ ${currentDate.toDateString()} ‚Üí –ë–µ–∑ –∫–æ–º–º–∏—Ç–æ–≤`);
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
    currentDate.setDate(currentDate.getDate() + 1);
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
  await git.push();
  console.log("üöÄ –í—Å–µ –∫–æ–º–º–∏—Ç—ã –∑–∞–ø—É—à–µ–Ω—ã!");
}

// üõ†Ô∏è –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const startDateStr = prompt("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –¥–∞—Ç—É (YYYY-MM-DD): ");
const endDateStr = prompt("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (YYYY-MM-DD): ");

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Date
const startDate = new Date(startDateStr);
const endDate = new Date(endDateStr);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç
if (isNaN(startDate) || isNaN(endDate) || startDate >= endDate) {
  console.log("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã.");
  process.exit(1);
}

generateCommits(startDate, endDate).catch(console.error);
